              	; --------------------------------------
              	; zasm: assemble "library.asm"
              	; date: 2019-01-02 07:37:41
              	; --------------------------------------


              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		library.asm
              	;		Purpose:	Wrapper for building libraries.
              	;		Date : 		1st January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              		include "common/kernel.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		1st January 2019
              	;		Purpose :	Flat Forth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
0020:         	FirstCodePage = $20 								; $20 = code page.
5FFE:         	StackTop = $5FFE 									; Z80 call stack top.
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: CF86    			dw 		SystemInformation 
              	
8006: DD01    	Boot:	db 		$DD,$01
8008: 31FE5F  			ld 		sp,StackTop							; reset Z80 Stack
800B: F3      			di											; disable interrupts
800C: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
8010: 2E00    			ld 		l,0	 								; graphic mode 0
8012: CD8584  			call 	GFXMode
8015: 3ADD86  			ld 		a,(StartAddressPage)				; Switch to start page
8018: ED9256  			db 		$ED,$92,$56
801B: 3C      			inc 	a
801C: ED9257  			db 		$ED,$92,$57
801F: 3D      			dec 	a
8020: 08      			ex 		af,af'								; Set A' to current page.
8021: 2ADB86  			ld 		hl,(StartAddress) 					; start running address
8024: E9      			jp 		(hl) 								; and start
              	
8025:         	__KernelHalt: 										; if boot address not set.
8025: 18FE    			jr 		__KernelHalt
              	
8027:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
8027: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
802B: 00000000	
802F: 0C1E1E0C	
8033: 0C000C00	
8037: 36360000	
803B: 00000000	
803F: 36367F36	
8043: 7F363600	
8047: 183E603C	
804B: 067C1800	
804F: 0063660C	
8053: 18336300	
8057: 1C361C3B	
805B: 6E663B00	
805F: 30306000	
8063: 00000000	
8067: 0C183030	
806B: 30180C00	
806F: 30180C0C	
8073: 0C183000	
8077: 00331E7F	
807B: 1E330000	
807F: 0018187E	
8083: 18180000	
8087: 00000000	
808B: 00181830	
808F: 0000007E	
8093: 00000000	
8097: 00000000	
809B: 00181800	
809F: 03060C18	
80A3: 30604000	
80A7: 3E63676F	
80AB: 7B733E00	
80AF: 18381818	
80B3: 18187E00	
80B7: 3C66061C	
80BB: 30667E00	
80BF: 3C66061C	
80C3: 06663C00	
80C7: 0E1E3666	
80CB: 7F060F00	
80CF: 7E607C06	
80D3: 06663C00	
80D7: 1C30607C	
80DB: 66663C00	
80DF: 7E66060C	
80E3: 18181800	
80E7: 3C66663C	
80EB: 66663C00	
80EF: 3C66663E	
80F3: 060C3800	
80F7: 00181800	
80FB: 00181800	
80FF: 00181800	
8103: 00181830	
8107: 0C183060	
810B: 30180C00	
810F: 00007E00	
8113: 007E0000	
8117: 30180C06	
811B: 0C183000	
811F: 3C66060C	
8123: 18001800	
8127: 3E636F6F	
812B: 6F603C00	
812F: 183C6666	
8133: 7E666600	
8137: 7E33333E	
813B: 33337E00	
813F: 1E336060	
8143: 60331E00	
8147: 7C363333	
814B: 33367C00	
814F: 7F31343C	
8153: 34317F00	
8157: 7F31343C	
815B: 34307800	
815F: 1E336060	
8163: 67331F00	
8167: 6666667E	
816B: 66666600	
816F: 3C181818	
8173: 18183C00	
8177: 0F060606	
817B: 66663C00	
817F: 7333363C	
8183: 36337300	
8187: 78303030	
818B: 31337F00	
818F: 63777F7F	
8193: 6B636300	
8197: 63737B6F	
819B: 67636300	
819F: 1C366363	
81A3: 63361C00	
81A7: 7E33333E	
81AB: 30307800	
81AF: 3C666666	
81B3: 6E3C0E00	
81B7: 7E33333E	
81BB: 36337300	
81BF: 3C667038	
81C3: 0E663C00	
81C7: 7E5A1818	
81CB: 18183C00	
81CF: 66666666	
81D3: 66667E00	
81D7: 66666666	
81DB: 663C1800	
81DF: 6363636B	
81E3: 7F776300	
81E7: 6363361C	
81EB: 1C366300	
81EF: 6666663C	
81F3: 18183C00	
81F7: 7F63460C	
81FB: 19337F00	
81FF: 3C303030	
8203: 30303C00	
8207: 6030180C	
820B: 06030100	
820F: 3C0C0C0C	
8213: 0C0C3C00	
8217: 081C3663	
821B: 00000000	
821F: 00000000	
8223: 0000007F	
8227: 18180C00	
822B: 00000000	
822F: 00003C06	
8233: 3E663B00	
8237: 7030303E	
823B: 33336E00	
823F: 00003C66	
8243: 60663C00	
8247: 0E06063E	
824B: 66663B00	
824F: 00003C66	
8253: 7E603C00	
8257: 1C363078	
825B: 30307800	
825F: 00003B66	
8263: 663E067C	
8267: 7030363B	
826B: 33337300	
826F: 18003818	
8273: 18183C00	
8277: 06000606	
827B: 0666663C	
827F: 70303336	
8283: 3C367300	
8287: 38181818	
828B: 18183C00	
828F: 0000667F	
8293: 7F6B6300	
8297: 00007C66	
829B: 66666600	
829F: 00003C66	
82A3: 66663C00	
82A7: 00006E33	
82AB: 333E3078	
82AF: 00003B66	
82B3: 663E060F	
82B7: 00006E3B	
82BB: 33307800	
82BF: 00003E60	
82C3: 3C067C00	
82C7: 08183E18	
82CB: 181A0C00	
82CF: 00006666	
82D3: 66663B00	
82D7: 00006666	
82DB: 663C1800	
82DF: 0000636B	
82E3: 7F7F3600	
82E7: 00006336	
82EB: 1C366300	
82EF: 00006666	
82F3: 663E067C	
82F7: 00007E4C	
82FB: 18327E00	
82FF: 0E181870	
8303: 18180E00	
8307: 0C0C0C00	
830B: 0C0C0C00	
830F: 7018180E	
8313: 18187000	
8317: 3B6E0000	
831B: 00000000	
831F: 00...   	
              	
              		include "temp/__source.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		1st January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	;	Actually calculates HL / BC
              	
8327:         	import_73_79_73_2e_64_69_76_69_64_65_3a_30
8327: C5      		push 	bc
8328: D5      		push 	de
8329: EB      		ex 		de,hl
832A: 69      		ld 		l,c
832B: 60      		ld 		h,b
832C: CD3E83  		call 	DIVDivideMod16
832F: EB      		ex 		de,hl
8330: D1      		pop 	de
8331: C1      		pop 	bc
8332: C9      		ret
              	
              	;	Actually calculates HL % BC
              	
8333:         	import_73_79_73_2e_6d_6f_64_75_6c_75_73_3a_30
8333: C5      		push 	bc
8334: D5      		push 	de
8335: EB      		ex 		de,hl
8336: 69      		ld 		l,c
8337: 60      		ld 		h,b
8338: CD3E83  		call 	DIVDivideMod16
833B: D1      		pop 	de
833C: C1      		pop 	bc
833D: C9      		ret
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
833E:         	DIVDivideMod16:
              	
833E: C5      		push 	bc
833F: 42      		ld 		b,d 				; DE
8340: 4B      		ld 		c,e
8341: EB      		ex 		de,hl
8342: 210000  		ld 		hl,0
8345: 78      		ld 		a,b
8346: 0608    		ld 		b,8
8348:         	Div16_Loop1:
8348: 17      		rla
8349: ED6A    		adc 	hl,hl
834B: ED52    		sbc 	hl,de
834D: 3001    		jr 		nc,Div16_NoAdd1
834F: 19      		add 	hl,de
8350:         	Div16_NoAdd1:
8350: 10F6    		djnz 	Div16_Loop1
8352: 17      		rla
8353: 2F      		cpl
8354: 47      		ld 		b,a
8355: 79      		ld 		a,c
8356: 48      		ld 		c,b
8357: 0608    		ld 		b,8
8359:         	Div16_Loop2:
8359: 17      		rla
835A: ED6A    		adc 	hl,hl
835C: ED52    		sbc 	hl,de
835E: 3001    		jr 		nc,Div16_NoAdd2
8360: 19      		add 	hl,de
8361:         	Div16_NoAdd2:
8361: 10F6    		djnz 	Div16_Loop2
8363: 17      		rla
8364: 2F      		cpl
8365: 51      		ld 		d,c
8366: 5F      		ld 		e,a
8367: C1      		pop 	bc
8368: C9      		ret
              	
              	
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		bitwise.asm
              	;		Purpose:	16 bit bitwise operations
              	;		Date : 		1st January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
8369:         	import_73_79_73_2e_61_6e_64_3a_30
8369: 7C      			ld 		a,h
836A: A0      			and 	b
836B: 67      			ld 		h,a
836C: 7D      			ld 		a,l
836D: A1      			and 	c
836E: 6F      			ld 		l,a
836F: C9      			ret
              	
8370:         	import_73_79_73_2e_78_6f_72_3a_30
8370: 7C      			ld 		a,h
8371: A8      			xor 	b
8372: 67      			ld 		h,a
8373: 7D      			ld 		a,l
8374: A9      			xor 	c
8375: 6F      			ld 		l,a
8376: C9      			ret
              	
8377:         	import_73_79_73_2e_6f_72_3a_30
8377: 7C      			ld 		a,h
8378: B0      			or 		b
8379: 67      			ld 		h,a
837A: 7D      			ld 		a,l
837B: B1      			or 		c
837C: 6F      			ld 		l,a
837D: C9      			ret
              	
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		1st January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; 	calculate HL = HL * BC
              	
837E:         	import_73_79_73_2e_6d_75_6c_74_69_70_6c_79_3a_30
837E: D5      			push 	de
837F: 50      			ld 		d,b
8380: 59      			ld 		e,c
8381: CD8683  			call 	MULTMultiply16
8384: D1      			pop 	de
8385: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
8386:         	MULTMultiply16:
8386: C5      			push 	bc
8387: D5      			push 	de
8388: 44      			ld 		b,h 							; get multipliers in DE/BC
8389: 4D      			ld 		c,l
838A: 210000  			ld 		hl,0 							; zero total
838D:         	__Core__Mult_Loop:
838D: CB41    			bit 	0,c 							; lsb of shifter is non-zero
838F: 2801    			jr 		z,__Core__Mult_Shift
8391: 19      			add 	hl,de 							; add adder to total
8392:         	__Core__Mult_Shift:
8392: CB38    			srl 	b 								; shift BC right.
8394: CB19    			rr 		c
8396: EB      			ex 		de,hl 							; shift DE left
8397: 29      			add 	hl,hl
8398: EB      			ex 		de,hl
8399: 78      			ld 		a,b 							; loop back if BC is nonzero
839A: B1      			or 		c
839B: 20F0    			jr 		nz,__Core__Mult_Loop
839D: D1      			pop 	de
839E: C1      			pop 	bc
839F: C9      			ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		1st January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
83A0:         	import_63_6f_6e_73_6f_6c_65_2e_69_6e_6b_65_79_3a_31
83A0: CDA883  			call 	IOScanKeyboard 						; read keyboard
83A3: 77      			ld 		(hl),a 								; copy into variable
83A4: 23      			inc 	hl
83A5: 3600    			ld 		(hl),$00	 						; zero upper byte.
83A7: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              	
83A8:         	IOScanKeyboard:
83A8: C5      			push 	bc
83A9: D5      			push 	de
83AA: E5      			push 	hl
              	
83AB: 21FD83  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
83AE: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
83B0: 06FE    			ld 		b,$FE
83B2: ED78    			in 		a,(c)
83B4: CB47    			bit 	0,a
83B6: 2005    			jr 		nz,__kr1
83B8: 212584  			ld 		hl,__kr_shift_table
83BB: 180B    			jr 		__kr2
83BD:         	__kr1:
83BD: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
83BF: ED78    			in 		a,(c)
83C1: CB4F    			bit 	1,a
83C3: 2003    			jr 		nz,__kr2
83C5: 212584  			ld 		hl,__kr_symbol_shift_table
83C8:         	__kr2:
              	
83C8: 1EFE    			ld 		e,$FE 								; scan pattern.
83CA: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
83CB: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
83CD: FEFE    			cp 		$FE
83CF: 2808    			jr 		z,___kr4
83D1: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
83D3: FE7F    			cp 		$7F
83D5: 2802    			jr 		z,___kr4
83D7: 161F    			ld 		d,$01F 								; check all bits.
83D9:         	___kr4:
83D9: 43      			ld 		b,e 								; scan the keyboard
83DA: 0EFE    			ld 		c,$FE
83DC: ED78    			in 		a,(c)
83DE: 2F      			cpl 										; make that active high.
83DF: A2      			and 	d  									; and with check value.
83E0: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
83E2: 23      			inc 	hl 									; next set of keyboard characters
83E3: 23      			inc 	hl
83E4: 23      			inc 	hl
83E5: 23      			inc 	hl
83E6: 23      			inc 	hl
              	
83E7: 7B      			ld 		a,e 								; get pattern
83E8: 87      			add 	a,a 								; shift left
83E9: F601    			or 		1 									; set bit 1.
83EB: 5F      			ld 		e,a
              	
83EC: FEFF    			cp 		$FF 								; finished when all 1's.
83EE: 20DA    			jr 		nz,__kr3
83F0: AF      			xor 	a
83F1: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
83F3:         	__kr_keypressed:
83F3: 23      			inc 	hl  								; shift right until carry set
83F4: 1F      			rra
83F5: 30FC    			jr 		nc,__kr_keypressed
83F7: 2B      			dec 	hl 									; undo the last inc hl
83F8: 7E      			ld 		a,(hl) 								; get the character number.
83F9:         	__kr_exit:
83F9: E1      			pop 	hl
83FA: D1      			pop 	de
83FB: C1      			pop 	bc
83FC: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	3:Abort (Shift+Q) 8:Backspace 13:Return
              	;	27:Break 32-127: Std ASCII all L/C
              	;
83FD:         	__kr_no_shift_table:
83FD: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
8401: 76617364	
8405: 6667    	
8407: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
840B: 74313233	
840F: 3435    	
8411: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
8415: 36706F69	
8419: 7579    	
841B: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
841F: 6820006D	
8423: 6E62    	
              	
8425:         	__kr_shift_table:
8425:         	__kr_symbol_shift_table:
8425: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
8429: 2F7E7C5C	
842D: 7B7D    	
842F: 0300003C			db 		 3,  0,  0  ,'<','>',			'!','@','#','$','%'
8433: 3E214023	
8437: 2425    	
8439: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
843D: 26223B00	
8441: 5D5B    	
8443: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8447: 5E20002E	
844B: 2C2A    	
              	
844D: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
8451: 2F7E7C5C	
8455: 7B7D    	
8457: 0300003C			db 		3,  0,  0  ,'<','>',			16,17,18,19,20
845B: 3E101112	
845F: 1314    	
8461: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
8465: 15223B00	
8469: 5D5B    	
846B: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
846F: 5E20002E	
8473: 2C2A    	
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		1st January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
8475:         	import_63_6f_6e_73_6f_6c_65_2e_73_65_74_6d_6f_64_65_3a_31
8475: C38584  			jp 		GFXMode
              	
8478:         	import_63_6f_6e_73_6f_6c_65_2e_77_72_69_74_65_3a_32
8478: C3B684  			jp 		GFXWriteCharacter
              	
847B:         	import_63_6f_6e_73_6f_6c_65_2e_77_72_69_74_65_68_65_78_3a_32
847B: C3C984  			jp 		GFXWriteHexWord
              	
847E:         	import_63_6f_6e_73_6f_6c_65_2e_69_6e_66_6f_3a_31
847E: 11DF86  			ld 		de,DisplayInformation
8481: 73      			ld 		(hl),e
8482: 23      			inc 	hl
8483: 72      			ld 		(hl),d
8484: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
8485:         	GFXMode:
8485: C5      			push 	bc
8486: D5      			push 	de
8487: E5      			push 	hl
8488: 2D      			dec 	l 									; L = 1 mode layer2
8489: 2808    			jr 		z,__GFXLayer2
848B: 2D      			dec 	l
848C: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
848E: CDA085  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
8491: 1808    			jr 		__GFXConfigure
              	
8493:         	__GFXLayer2:
8493: CD1886  			call 	GFXInitialiseLayer2
8496: 1803    			jr 		__GFXConfigure
              	
8498:         	__GFXLowRes:
8498: CDFB84  			call 	GFXInitialiseLowRes
              	
849B:         	__GFXConfigure:
849B: 7D      			ld 		a,l 								; save screen size
849C: 32DF86  			ld 		(SIScreenWidth),a
849F: 7C      			ld 		a,h
84A0: 32E386  			ld 		(SIScreenHeight),a
84A3: EB      			ex 		de,hl 								; save driver
84A4: 22EF86  			ld 		(SIScreenDriver),hl
              	
84A7: 6A      			ld 		l,d 								; put sizes in HL DE
84A8: 2600    			ld 		h,0
84AA: 1600    			ld 		d,0
84AC: CD8683  			call 	MULTMultiply16 						; multiply to get size and store.
84AF: 22E786  			ld 		(SIScreenSize),hl
              	
84B2: E1      			pop 	hl
84B3: D1      			pop 	de
84B4: C1      			pop 	bc
84B5: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
84B6:         	GFXWriteCharacter:
84B6: F5      			push 	af
84B7: C5      			push 	bc
84B8: D5      			push 	de
84B9: E5      			push 	hl
84BA: 01C484  			ld 		bc,__GFXWCExit
84BD: C5      			push 	bc
84BE: ED4BEF86			ld 		bc,(SIScreenDriver)
84C2: C5      			push 	bc
84C3: C9      			ret
84C4:         	__GFXWCExit:
84C4: E1      			pop 	hl
84C5: D1      			pop 	de
84C6: C1      			pop 	bc
84C7: F1      			pop 	af
84C8: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
84C9:         	GFXWriteHexWord:
84C9: 3E05    			ld 		a,5
84CB:         	GFXWriteHexWordA:
84CB: C5      			push 	bc
84CC: D5      			push 	de
84CD: E5      			push 	hl
84CE: 4F      			ld 		c,a
84CF: 7A      			ld 		a,d
84D0: D5      			push 	de
84D1: CDDD84  			call 	__GFXWHByte
84D4: D1      			pop 	de
84D5: 7B      			ld 		a,e
84D6: CDDD84  			call	__GFXWHByte
84D9: E1      			pop 	hl
84DA: D1      			pop 	de
84DB: C1      			pop 	bc
84DC: C9      			ret
              	
84DD:         	__GFXWHByte:
84DD: F5      			push 	af
84DE: CB0F    			rrc 	a
84E0: CB0F    			rrc		a
84E2: CB0F    			rrc 	a
84E4: CB0F    			rrc 	a
84E6: CDEA84  			call 	__GFXWHNibble
84E9: F1      			pop 	af
84EA:         	__GFXWHNibble:
84EA: 51      			ld 		d,c
84EB: E60F    			and 	15
84ED: FE0A    			cp 		10
84EF: 3802    			jr 		c,__GFXWHDigit
84F1: C607    			add		a,7
84F3:         	__GFXWHDigit:
84F3: C630    			add 	a,48
84F5: 5F      			ld 		e,a
84F6: CDB684  			call 	GFXWriteCharacter
84F9: 23      			inc 	hl
84FA: C9      			ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		1st January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
84FB:         	GFXInitialiseLowRes:
84FB: F5      			push 	af
84FC: C5      			push 	bc
84FD: D5      			push 	de
              	
84FE: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8502: AF      			xor 	a 									; layer 2 off.
8503: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8506: ED79    			out 	(c),a
              	
8508: 210040  			ld 		hl,$4000 							; erase the bank to $00
850B: 110060  			ld 		de,$6000
850E:         	LowClearScreen: 									; assume default palette :)
850E: AF      			xor 	a
850F: 77      			ld 		(hl),a
8510: 12      			ld 		(de),a
8511: 23      			inc 	hl
8512: 13      			inc 	de
8513: 7C      			ld 		a,h
8514: FE58    			cp 		$58
8516: 20F6    			jr		nz,LowClearScreen
8518: AF      			xor 	a
8519: D3FE    			out 	($FE),a
851B: D1      			pop 	de
851C: C1      			pop 	bc
851D: F1      			pop 	af
851E: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
8521: 112585  			ld 		de,GFXPrintCharacterLowRes
8524: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
8525:         	GFXPrintCharacterLowRes:
8525: F5      			push 	af
8526: C5      			push 	bc
8527: D5      			push 	de
8528: E5      			push 	hl
8529: DDE5    			push 	ix
              	
852B: 43      			ld 		b,e 								; save character in B
852C: 7B      			ld 		a,e
852D: E67F    			and 	$7F
852F: FE20    			cp 		32
8531: 3866    			jr 		c,__LPExit
              	
8533: 29      			add 	hl,hl
8534: 29      			add 	hl,hl
8535: 7C      			ld	 	a,h 								; check in range 192*4 = 768
8536: FE03    			cp 		3
8538: 305F    			jr 		nc,__LPExit
              	
853A: 7A      			ld 		a,d 								; only lower 3 bits of colour
853B: E607    			and 	7
853D: 4F      			ld 		c,a 								; C is foreground
              	
853E: E5      			push 	hl
853F: 78      			ld 		a,b 								; get char back
8540: 0600    			ld 		b,0 								; B = no flip colour.
8542: CB7F    			bit 	7,a
8544: 2801    			jr 		z,__LowNotReverse 					; but 7 set, flip is $FF
8546: 05      			dec 	b
8547:         	__LowNotReverse:
8547: E67F    			and 	$7F 								; offset from space
8549: D620    			sub 	$20
854B: 6F      			ld 		l,a 								; put into HL
854C: 2600    			ld 		h,0
854E: 29      			add 	hl,hl 								; x 8
854F: 29      			add 	hl,hl
8550: 29      			add 	hl,hl
              	
8551: E5      			push 	hl 									; transfer to IX
8552: DDE1    			pop 	ix
              	
8554: C5      			push 	bc 									; add the font base to it.
8555: ED4BEB86			ld 		bc,(SIFontBase)
8559: DD09    			add 	ix,bc
855B: C1      			pop 	bc
855C: E1      			pop 	hl
855D: EB      			ex 		de,hl
855E: 7B      			ld 		a,e 								; put DE => HL
855F: E6C0    			and 	192 								; these are part of Y
8561: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
8562: 62      			ld 		h,d
8563: 29      			add 	hl,hl
8564: 29      			add 	hl,hl
8565: 29      			add 	hl,hl
8566: 29      			add 	hl,hl
8567: CBF4    			set 	6,h 								; put into $4000 range
              	
8569: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
856B: A3      			and 	e 									; and with E, gives X position
856C: 87      			add 	a,a 								; now multiplied by 8.
856D: 5F      			ld 		e,a 								; DE is x offset.
856E: 1600    			ld 		d,0
              	
8570: 19      			add 	hl,de
8571: 7C      			ld 		a,h
8572: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
8574: 3804    			jr 		c,__LowNotLower2
8576: 110008  			ld 		de,$0800
8579: 19      			add 	hl,de
857A:         	__LowNotLower2:
857A: 1E08    			ld 		e,8 								; do 8 rows
857C:         	__LowOuter:
857C: E5      			push 	hl 									; save start
857D: 1608    			ld 		d,8 								; do 8 columns
857F: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8582: A8      			xor 	b
8583: DD23    			inc 	ix
8585:         	__LowLoop:
8585: 3600    			ld 		(hl),0 								; background
8587: 87      			add 	a,a 								; shift pattern left
8588: 3001    			jr 		nc,__LowNotSet
858A: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
858B:         	__LowNotSet:
858B: 2C      			inc 	l
858C: 15      			dec 	d 									; do a row
858D: 20F6    			jr 		nz,	__LowLoop
858F: E1      			pop 	hl 									; restore, go 256 bytes down.
8590: D5      			push 	de
8591: 118000  			ld 		de,128
8594: 19      			add 	hl,de
8595: D1      			pop 	de
8596: 1D      			dec 	e 									; do 8 rows
8597: 20E3    			jr 		nz,__LowOuter
8599:         	__LPExit:
8599: DDE1    			pop 	ix
859B: E1      			pop 	hl
859C: D1      			pop 	de
859D: C1      			pop 	bc
859E: F1      			pop 	af
859F: C9      			ret
              	
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled.
              	;		Date : 		1st January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k
              	;
              	; *********************************************************************************
              	
85A0:         	GFXInitialise48k:
85A0: F5      			push 	af 									; save registers
85A1: C5      			push 	bc
              	
85A2: 013B12  			ld 		bc,$123B 							; Layer 2 access port
85A5: 3E00    			ld 		a,0 								; disable Layer 2
85A7: ED79    			out 	(c),a
85A9: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
85AD: 210040  			ld 		hl,$4000 							; clear pixel memory
85B0: 3600    	__cs1:	ld 		(hl),0
85B2: 23      			inc 	hl
85B3: 7C      			ld 		a,h
85B4: FE58    			cp 		$58
85B6: 20F8    			jr 		nz,__cs1
85B8: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
85BA: 23      			inc 	hl
85BB: 7C      			ld 		a,h
85BC: FE5B    			cp 		$5B
85BE: 20F8    			jr 		nz,__cs2
85C0: AF      			xor 	a 									; border off
85C1: D3FE    			out 	($FE),a
85C3: C1      			pop 	bc
85C4: F1      			pop 	af
85C5: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
85C8: 11CC85  			ld 		de,GFXPrintCharacter48k
85CB: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
85CC:         	GFXPrintCharacter48k:
85CC: F5      			push 	af 									; save registers
85CD: C5      			push 	bc
85CE: D5      			push 	de
85CF: E5      			push 	hl
              	
85D0: 43      			ld 		b,e 								; character in B
85D1: 7C      			ld 		a,h 								; check range.
85D2: FE03    			cp 		3
85D4: 303D    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
85D6: E5      			push 	hl 									; save position.
85D7: 7C      			ld 		a,h
85D8: C658    			add 	$58
85DA: 67      			ld 		h,a
              	
85DB: 7A      			ld 		a,d 								; get current colour
85DC: E607    			and 	7  									; mask 0..2
85DE: F640    			or 		$40  								; make bright
85E0: 77      			ld 		(hl),a 								; store it.
85E1: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
85E2: D5      			push 	de
85E3: EB      			ex 		de,hl
85E4: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
85E5: 7A      			ld 		a,d
85E6: E603    			and 	3
85E8: 87      			add 	a,a
85E9: 87      			add 	a,a
85EA: 87      			add 	a,a
85EB: F640    			or 		$40
85ED: 67      			ld 		h,a
85EE: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
85EF: E5      			push 	hl
85F0: 78      			ld 		a,b 								; get character
85F1: E67F    			and 	$7F 								; bits 0-6 only.
85F3: D620    			sub 	32
85F5: 6F      			ld 		l,a 								; put in HL
85F6: 2600    			ld 		h,0
85F8: 29      			add 	hl,hl 								; x 8
85F9: 29      			add 	hl,hl
85FA: 29      			add 	hl,hl
85FB: ED5BEB86			ld 		de,(SIFontBase) 					; add the font base.
85FF: 19      			add 	hl,de
8600: EB      			ex 		de,hl 								; put in DE (font address)
8601: E1      			pop 	hl
              	;
              	;		copy font data to screen position.
              	;
8602: 78      			ld 		a,b
8603: 0608    			ld 		b,8 								; copy 8 characters
8605: 0E00    			ld 		c,0 								; XOR value 0
8607: CB7F    			bit 	7,a 								; is the character reversed
8609: 2801    			jr 		z,__ZXWCCopy
860B: 0D      			dec 	c 									; C is the XOR mask now $FF
860C:         	__ZXWCCopy:
860C: 1A      			ld 		a,(de)								; get font data
860D: A9      			xor 	c 									; xor with reverse
860E: 77      			ld 		(hl),a 								; write back
860F: 24      			inc 	h 									; bump pointers
8610: 13      			inc 	de
8611: 10F9    			djnz 	__ZXWCCopy 							; do B times.
8613:         	__ZXWCExit:
8613: E1      			pop 	hl 									; restore and exit
8614: D1      			pop 	de
8615: C1      			pop 	bc
8616: F1      			pop 	af
8617: C9      			ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		1st January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
8618:         	GFXInitialiseLayer2:
8618: F5      			push 	af
8619: C5      			push 	bc
861A: D5      			push 	de
861B: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
861F: 1E02    			ld 		e,2 								; 3 banks to erase
8621:         	L2PClear:
8621: 7B      			ld 		a,e 								; put bank number in bits 6/7
8622: CB0F    			rrc 	a
8624: CB0F    			rrc 	a
8626: F603    			or 		2+1 								; shadow on, visible, enable write paging
8628: 013B12  			ld 		bc,$123B 							; out to layer 2 port
862B: ED79    			out 	(c),a
862D: 210040  			ld 		hl,$4000 							; erase the bank to $00
8630:         	L2PClearBank: 										; assume default palette :)
8630: 2B      			dec 	hl
8631: 3600    			ld 		(hl),$00
8633: 7C      			ld 		a,h
8634: B5      			or 		l
8635: 20F9    			jr		nz,L2PClearBank
8637: 1D      			dec 	e
8638: F22186  			jp 		p,L2PClear
              	
863B: AF      			xor 	a
863C: D3FE    			out 	($FE),a
              	
863E: D1      			pop 	de
863F: C1      			pop 	bc
8640: F1      			pop 	af
8641: 212018  			ld 		hl,$1820 							; still 32 x 24
8644: 114886  			ld 		de,GFXPrintCharacterLayer2
8647: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
8648:         	GFXPrintCharacterLayer2:
8648: F5      			push 	af
8649: C5      			push 	bc
864A: D5      			push 	de
864B: E5      			push 	hl
864C: DDE5    			push 	ix
              	
864E: 43      			ld 		b,e 								; save A temporarily
864F: 78      			ld 		a,b
8650: E67F    			and 	$7F
8652: FE20    			cp 		32
8654: 3872    			jr 		c,__L2Exit 							; check char in range
8656: 7C      			ld 		a,h
8657: FE03    			cp 		3
8659: 306D    			jr 		nc,__L2Exit 						; check position in range
865B: 78      			ld 		a,b
              	
865C: F5      			push 	af
865D: AF      			xor 	a 									; convert colour in C to palette index
865E: CB42    			bit 	0,d 								; (assumes standard palette)
8660: 2802    			jr 		z,__L2Not1
8662: F603    			or 		$03
8664:         	__L2Not1:
8664: CB52    			bit 	2,d
8666: 2802    			jr 		z,__L2Not2
8668: F61C    			or 		$1C
866A:         	__L2Not2:
866A: CB4A    			bit 	1,d
866C: 2802    			jr 		z,__L2Not3
866E: F6C0    			or 		$C0
8670:         	__L2Not3:
8670: 4F      			ld 		c,a 								; C is foreground
8671: 0600    			ld 		b,0									; B is xor flipper, initially zero
8673: F1      			pop 	af 									; restore char
              	
8674: E5      			push 	hl
8675: CB7F    			bit 	7,a 								; adjust background bit on bit 7
8677: 2802    			jr 		z,__L2NotCursor
8679: 06FF    			ld 		b,$FF 								; light grey is cursor
867B:         	__L2NotCursor:
867B: E67F    			and 	$7F 								; offset from space
867D: D620    			sub 	$20
867F: 6F      			ld 		l,a 								; put into HL
8680: 2600    			ld 		h,0
8682: 29      			add 	hl,hl 								; x 8
8683: 29      			add 	hl,hl
8684: 29      			add 	hl,hl
              	
8685: E5      			push 	hl 									; transfer to IX
8686: DDE1    			pop 	ix
8688: E1      			pop 	hl
              	
8689: C5      			push 	bc 									; add the font base to it.
868A: ED4BEB86			ld 		bc,(SIFontBase)
868E: DD09    			add 	ix,bc
8690: C1      			pop 	bc
              			;
              			;		figure out the correct bank.
              			;
8691: C5      			push 	bc
8692: 7C      			ld  	a,h 								; this is the page number.
8693: CB0F    			rrc 	a
8695: CB0F    			rrc 	a
8697: E6C0    			and 	$C0 								; in bits 6 & 7
8699: F603    			or 		$03 								; shadow on, visible, enable write pagin.
869B: 013B12  			ld 		bc,$123B 							; out to layer 2 port
869E: ED79    			out 	(c),a
86A0: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
86A1: EB      			ex 		de,hl
86A2: 6B      			ld 		l,e
86A3: 2600    			ld 		h,0
86A5: 29      			add 	hl,hl
86A6: 29      			add 	hl,hl
86A7: 29      			add 	hl,hl
86A8: CB24    			sla 	h
86AA: CB24    			sla 	h
86AC: CB24    			sla 	h
              	
86AE: 1E08    			ld 		e,8 								; do 8 rows
86B0:         	__L2Outer:
86B0: E5      			push 	hl 									; save start
86B1: 1608    			ld 		d,8 								; do 8 columns
86B3: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
86B6: A8      			xor 	b 									; maybe flip it ?
86B7: DD23    			inc 	ix
86B9:         	__L2Loop:
86B9: 3600    			ld 		(hl),0 								; background
86BB: 87      			add 	a,a 								; shift pattern left
86BC: 3001    			jr 		nc,__L2NotSet
86BE: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
86BF:         	__L2NotSet:
86BF: 23      			inc 	hl
86C0: 15      			dec 	d 									; do a row
86C1: 20F6    			jr 		nz,	__L2Loop
86C3: E1      			pop 	hl 									; restore, go 256 bytes down.
86C4: 24      			inc 	h
86C5: 1D      			dec 	e 									; do 8 rows
86C6: 20E8    			jr 		nz,__L2Outer
86C8:         	__L2Exit:
86C8: DDE1    			pop 	ix
86CA: E1      			pop 	hl
86CB: D1      			pop 	de
86CC: C1      			pop 	bc
86CD: F1      			pop 	af
86CE: C9      			ret
              		include "common/data.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		1st January 2019
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;								System Information
              	;
              	; ***************************************************************************************
              	
86CF:         	SystemInformation:
              	
86CF:         	Here:												; +0 	Here 
86CF: F386    			dw 		FreeMemory
86D1:         	HerePage: 											; +2	Here.Page
86D1: 2000    			db 		FirstCodePage,0
86D3:         	NextFreePage: 										; +4 	Next available code page (2 8k pages/page)
86D3: 22000000			db 		FirstCodePage+2,0,0,0
86D7:         	DisplayInfo: 										; +8 	Display information
86D7: DF860000			dw 		DisplayInformation,0		
86DB:         	StartAddress: 										; +12 	Start Address
86DB: 2580    			dw 		__KernelHalt
86DD:         	StartAddressPage: 									; +14 	Start Page
86DD: 2000    			db 		FirstCodePage,0
              	
              	; ***************************************************************************************
              	;
              	;							 Display system information
              	;
              	; ***************************************************************************************
              	
86DF:         	DisplayInformation:
              	
86DF:         	SIScreenWidth: 										; +0 	screen width
86DF: 00000000			db 		0,0,0,0
86E3:         	SIScreenHeight:										; +4 	screen height
86E3: 00000000			db 		0,0,0,0
86E7:         	SIScreenSize:										; +8 	screen size
86E7: 00000000			db 		0,0,0,0
86EB:         	SIFontBase:											; +12 	font in use
86EB: 27800000			dw 		AlternateFont,0
86EF:         	SIScreenDriver:										; +16 	currently selected screen driver
86EF: 00000000			dw 		0,0
              	
86F3:         	FreeMemory:		


; +++ segments +++

#CODE          = $8000 = 32768,  size = $06F3 =  1779

; +++ global symbols +++

AlternateFont                                    = $8027 = 32807          kernel.asm:38
Boot                                             = $8006 = 32774          kernel.asm:20
DIVDivideMod16                                   = $833E = 33598          __source.asm:45
DisplayInfo                                      = $86D7 = 34519          data.asm:26 (unused)
DisplayInformation                               = $86DF = 34527          data.asm:39
Div16_Loop1                                      = $8348 = 33608          __source.asm:54
Div16_Loop2                                      = $8359 = 33625          __source.asm:68
Div16_NoAdd1                                     = $8350 = 33616          __source.asm:60
Div16_NoAdd2                                     = $8361 = 33633          __source.asm:74
FirstCodePage                                    = $0020 =    32          kernel.asm:12
FreeMemory                                       = $86F3 = 34547          data.asm:52
GFXInitialise48k                                 = $85A0 = 34208          __source.asm:594
GFXInitialiseLayer2                              = $8618 = 34328          __source.asm:721
GFXInitialiseLowRes                              = $84FB = 34043          __source.asm:443
GFXMode                                          = $8485 = 33925          __source.asm:321
GFXPrintCharacter48k                             = $85CC = 34252          __source.asm:628
GFXPrintCharacterLayer2                          = $8648 = 34376          __source.asm:757
GFXPrintCharacterLowRes                          = $8525 = 34085          __source.asm:475
GFXWriteCharacter                                = $84B6 = 33974          __source.asm:365
GFXWriteHexWord                                  = $84C9 = 33993          __source.asm:388
GFXWriteHexWordA                                 = $84CB = 33995          __source.asm:390 (unused)
Here                                             = $86CF = 34511          data.asm:20 (unused)
HerePage                                         = $86D1 = 34513          data.asm:22 (unused)
IOScanKeyboard                                   = $83A8 = 33704          __source.asm:195
L2PClear                                         = $8621 = 34337          __source.asm:728
L2PClearBank                                     = $8630 = 34352          __source.asm:736
LowClearScreen                                   = $850E = 34062          __source.asm:455
MULTMultiply16                                   = $8386 = 33670          __source.asm:149
NextFreePage                                     = $86D3 = 34515          data.asm:24 (unused)
SIFontBase                                       = $86EB = 34539          data.asm:47
SIScreenDriver                                   = $86EF = 34543          data.asm:49
SIScreenHeight                                   = $86E3 = 34531          data.asm:43
SIScreenSize                                     = $86E7 = 34535          data.asm:45
SIScreenWidth                                    = $86DF = 34527          data.asm:41
StackTop                                         = $5FFE = 24574          kernel.asm:13
StartAddress                                     = $86DB = 34523          data.asm:28
StartAddressPage                                 = $86DD = 34525          data.asm:30
SystemInformation                                = $86CF = 34511          data.asm:18
__Core__Mult_Loop                                = $838D = 33677          __source.asm:155
__Core__Mult_Shift                               = $8392 = 33682          __source.asm:159
__GFXConfigure                                   = $849B = 33947          __source.asm:340
__GFXLayer2                                      = $8493 = 33939          __source.asm:333
__GFXLowRes                                      = $8498 = 33944          __source.asm:337
__GFXWCExit                                      = $84C4 = 33988          __source.asm:375
__GFXWHByte                                      = $84DD = 34013          __source.asm:406
__GFXWHDigit                                     = $84F3 = 34035          __source.asm:420
__GFXWHNibble                                    = $84EA = 34026          __source.asm:414
__KernelHalt                                     = $8025 = 32805          kernel.asm:35
__L2Exit                                         = $86C8 = 34504          __source.asm:858
__L2Loop                                         = $86B9 = 34489          __source.asm:845
__L2Not1                                         = $8664 = 34404          __source.asm:779
__L2Not2                                         = $866A = 34410          __source.asm:783
__L2Not3                                         = $8670 = 34416          __source.asm:787
__L2NotCursor                                    = $867B = 34427          __source.asm:796
__L2NotSet                                       = $86BF = 34495          __source.asm:850
__L2Outer                                        = $86B0 = 34480          __source.asm:839
__LPExit                                         = $8599 = 34201          __source.asm:568
__LowLoop                                        = $8585 = 34181          __source.asm:552
__LowNotLower2                                   = $857A = 34170          __source.asm:544
__LowNotReverse                                  = $8547 = 34119          __source.asm:504
__LowNotSet                                      = $858B = 34187          __source.asm:557
__LowOuter                                       = $857C = 34172          __source.asm:546
__ZXWCCopy                                       = $860C = 34316          __source.asm:690
__ZXWCExit                                       = $8613 = 34323          __source.asm:697
___kr4                                           = $83D9 = 33753          __source.asm:226
__cs1                                            = $85B0 = 34224          __source.asm:604
__cs2                                            = $85B8 = 34232          __source.asm:609
__kr1                                            = $83BD = 33725          __source.asm:209
__kr2                                            = $83C8 = 33736          __source.asm:215
__kr3                                            = $83CA = 33738          __source.asm:218
__kr_exit                                        = $83F9 = 33785          __source.asm:256
__kr_keypressed                                  = $83F3 = 33779          __source.asm:250
__kr_no_shift_table                              = $83FD = 33789          __source.asm:271
__kr_shift_table                                 = $8425 = 33829          __source.asm:277
__kr_symbol_shift_table                          = $8425 = 33829          __source.asm:278
_end                                             = $86F3 = 34547          kernel.asm:2 (unused)
_size                                            = $06F3 =  1779          kernel.asm:2 (unused)
import_63_6f_6e_73_6f_6c_65_2e_69_6e_66_6f_3a_31 = $847E = 33918          __source.asm:308 (unused)
import_63_6f_6e_73_6f_6c_65_2e_69_6e_6b_65_79_3a_31 = $83A0 = 33696          __source.asm:182 (unused)
import_63_6f_6e_73_6f_6c_65_2e_73_65_74_6d_6f_64_65_3a_31 = $8475 = 33909          __source.asm:299 (unused)
import_63_6f_6e_73_6f_6c_65_2e_77_72_69_74_65_3a_32 = $8478 = 33912          __source.asm:302 (unused)
import_63_6f_6e_73_6f_6c_65_2e_77_72_69_74_65_68_65_78_3a_32 = $847B = 33915          __source.asm:305 (unused)
import_73_79_73_2e_61_6e_64_3a_30                = $8369 = 33641          __source.asm:95 (unused)
import_73_79_73_2e_64_69_76_69_64_65_3a_30       = $8327 = 33575          __source.asm:14 (unused)
import_73_79_73_2e_6d_6f_64_75_6c_75_73_3a_30    = $8333 = 33587          __source.asm:28 (unused)
import_73_79_73_2e_6d_75_6c_74_69_70_6c_79_3a_30 = $837E = 33662          __source.asm:135 (unused)
import_73_79_73_2e_6f_72_3a_30                   = $8377 = 33655          __source.asm:113 (unused)
import_73_79_73_2e_78_6f_72_3a_30                = $8370 = 33648          __source.asm:104 (unused)


total time: 0.0039 sec.
no errors
